///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.IO;
using System.Diagnostics;
using WinForms = System.Windows.Forms;


using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace AutoInstall
{
    public partial class ValidateEXEs
    {
        string dir = @"Downloads\InternFinal\InternFinal\Script\Reports\";
            string refDir = @"Downloads\InternFinal\InternFinal\Script\Reports\Reference\";
            string fileServ = @"CheckExeVersionServer.txt";
            string fileWS = @"CheckExeVersionWS.txt";
            
            
        private void Init()
        {
            
        }

		public void ValidateEXEReport()
        {
			            
            string pathSR = Path.Combine(dir,fileServ);
            string pathWS = Path.Combine(refDir,fileServ);
            
      		if (File.Exists(pathSR))
			   {
        		Report.Success("File Exist", "Success! " + fileServ + " exists!");
			   }
			else                  
			   {
				Report.Failure("File Exist", "Fail. " + fileServ + " does not exists.");
			   }
			
			if (File.Exists(pathWS))
			   {
        		Report.Success("File Exist", "Success! " + fileWS + " exists!");
			   }
			else                  
			   {
				Report.Failure("File Exist", "Fail. " + fileWS + " does not exists.");
			   }
        	
        }

        public void ValidateEXEReportServerContent()
        {
        	string filePath_Expected = Path.Combine(dir,fileServ);
        	string filePath_Current = Path.Combine(refDir,fileServ);
				
			    string customLogMessage = string.Empty;	
			               // prepare log messages  
			    const string fileNotFoundMessage = "File not found for comparison in Validate_FileContentEqual: {0}";  
			    const string logMessage = "Comparing content of files ({0} vs. {1})";  
			    if (string.IsNullOrEmpty(customLogMessage))  
			    {  
			        customLogMessage = string.Format(logMessage, filePath_Expected, filePath_Current);  
			    }  
			  
			    // check if file exists  
			    if (!System.IO.File.Exists(filePath_Current))  
			    {  
			        throw new Ranorex.RanorexException(string.Format(fileNotFoundMessage, filePath_Current));  
			    }  
			  
			    // check if referencing file exists  
			    if (!System.IO.File.Exists(filePath_Expected))  
			    {  
			        throw new Ranorex.RanorexException(string.Format(fileNotFoundMessage, filePath_Expected));  
			    }  
			  
			    // check if filenames are identical  
			    if (filePath_Expected.Equals(filePath_Current))  
			    {  
			        Ranorex.Validate.IsTrue(true, customLogMessage);  
			    }  
			    else  
			    {  
			        string current = System.IO.File.ReadAllText(filePath_Current);  
			        string expected = System.IO.File.ReadAllText(filePath_Expected);  
			        // validate whether expected value equals to current value  
			        Ranorex.Validate.AreEqual(current, expected, customLogMessage);  
			    }  
        }

        public void ValidateEXEReportWSContent()
        {
            string filePath_Expected = Path.Combine(dir,fileWS);
            string filePath_Current = Path.Combine(refDir,fileWS);
				
			    string customLogMessage = string.Empty;	
			               // prepare log messages  
			    const string fileNotFoundMessage = "File not found for comparison in Validate_FileContentEqual: {0}";  
			    const string logMessage = "Comparing content of files ({0} vs. {1})";  
			    if (string.IsNullOrEmpty(customLogMessage))  
			    {  
			        customLogMessage = string.Format(logMessage, filePath_Expected, filePath_Current);  
			    }  
			  
			    // check if file exists  
			    if (!System.IO.File.Exists(filePath_Current))  
			    {  
			        throw new Ranorex.RanorexException(string.Format(fileNotFoundMessage, filePath_Current));  
			    }  
			  
			    // check if referencing file exists  
			    if (!System.IO.File.Exists(filePath_Expected))  
			    {  
			        throw new Ranorex.RanorexException(string.Format(fileNotFoundMessage, filePath_Expected));  
			    }  
			  
			    // check if filenames are identical  
			    if (filePath_Expected.Equals(filePath_Current))  
			    {  
			        Ranorex.Validate.IsTrue(true, customLogMessage);  
			    }  
			    else  
			    {  
			        string current = System.IO.File.ReadAllText(filePath_Current);  
			        string expected = System.IO.File.ReadAllText(filePath_Expected);  
			        // validate whether expected value equals to current value  
			        Ranorex.Validate.AreEqual(current, expected, customLogMessage);  
			    }  
        }

    }
}
