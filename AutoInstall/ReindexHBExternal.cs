///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace AutoInstall
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ReindexHBExternal recording.
    /// </summary>
    [TestModule("0f03ff28-1812-42f6-8de2-207317b89a6e", ModuleType.Recording, 1)]
    public partial class ReindexHBExternal : ITestModule
    {
        /// <summary>
        /// Holds an instance of the AutoInstallRepository repository.
        /// </summary>
        public static AutoInstallRepository repo = AutoInstallRepository.Instance;

        static ReindexHBExternal instance = new ReindexHBExternal();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ReindexHBExternal()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ReindexHBExternal Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            try {
                Report.Log(ReportLevel.Info, "Application", "(Optional Action)\r\nRun application 'C:\\HeavyBidWS\\BIN\\REINDEX.EXE' with arguments ' HEAVYMULT' in normal mode.", new RecordItemIndex(0));
                Host.Local.RunApplication("C:\\HeavyBidWS\\BIN\\REINDEX.EXE", " HEAVYMULT", "C:\\HeavyBidWS\\BIN\\", false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(0)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'HBPopUpScreensExternal.Reindex.ReindexApplication.EllipisisButton' at Center.", repo.HBPopUpScreensExternal.Reindex.ReindexApplication.EllipisisButtonInfo, new RecordItemIndex(1));
                repo.HBPopUpScreensExternal.Reindex.ReindexApplication.EllipisisButton.Click();
                Delay.Milliseconds(200);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(1)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating Exists on item 'HBPopUpScreens.GridViewOfEstimatesPopup.ListOfEstimatesPopup.ListExistingEstimates'.", repo.HBPopUpScreens.GridViewOfEstimatesPopup.ListOfEstimatesPopup.ListExistingEstimatesInfo, new RecordItemIndex(2));
                Validate.Exists(repo.HBPopUpScreens.GridViewOfEstimatesPopup.ListOfEstimatesPopup.ListExistingEstimatesInfo, null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(2)); }
            
            // Type in Report you want
            try {
                //Report.Log(ReportLevel.Info, "Keyboard", "(Optional Action)\r\nType in Report you want\r\nKey sequence ''.", new RecordItemIndex(3));
                //Keyboard.Press("");
                //Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(3)); }
            
            try {
                //Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'HBPopUpScreens.GridViewOfEstimatesPopup.EstimateSearch.OKButton' at Center.", repo.HBPopUpScreens.GridViewOfEstimatesPopup.EstimateSearch.OKButtonInfo, new RecordItemIndex(4));
                //repo.HBPopUpScreens.GridViewOfEstimatesPopup.EstimateSearch.OKButton.Click();
                //Delay.Milliseconds(200);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(4)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'HBPopUpScreens.GridViewOfEstimatesPopup.ListOfEstimatesPopup.OKButton' at Center.", repo.HBPopUpScreens.GridViewOfEstimatesPopup.ListOfEstimatesPopup.OKButtonInfo, new RecordItemIndex(5));
                repo.HBPopUpScreens.GridViewOfEstimatesPopup.ListOfEstimatesPopup.OKButton.Click();
                Delay.Milliseconds(200);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(5)); }
            
            try {
                Report.Log(ReportLevel.Info, "Set value", "(Optional Action)\r\nSetting attribute Checked to 'True' on item 'HBPopUpScreensExternal.Reindex.ReindexApplication.CurrentEstimateCheckbox'.", repo.HBPopUpScreensExternal.Reindex.ReindexApplication.CurrentEstimateCheckboxInfo, new RecordItemIndex(6));
                repo.HBPopUpScreensExternal.Reindex.ReindexApplication.CurrentEstimateCheckbox.Element.SetAttributeValue("Checked", "True");
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(6)); }
            
            try {
                Report.Log(ReportLevel.Info, "Set value", "(Optional Action)\r\nSetting attribute Checked to 'True' on item 'HBPopUpScreensExternal.Reindex.ReindexApplication.SystemFilesCheckbox'.", repo.HBPopUpScreensExternal.Reindex.ReindexApplication.SystemFilesCheckboxInfo, new RecordItemIndex(7));
                repo.HBPopUpScreensExternal.Reindex.ReindexApplication.SystemFilesCheckbox.Element.SetAttributeValue("Checked", "True");
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(7)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'HBPopUpScreensExternal.Reindex.ReindexApplication.ButtonOK' at Center.", repo.HBPopUpScreensExternal.Reindex.ReindexApplication.ButtonOKInfo, new RecordItemIndex(8));
                repo.HBPopUpScreensExternal.Reindex.ReindexApplication.ButtonOK.Click();
                Delay.Milliseconds(200);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(8)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'HBPopUpScreens.FromFileButtons.ReindexRelated.ReindexWarningScreen.OKButton' at Center.", repo.HBPopUpScreens.FromFileButtons.ReindexRelated.ReindexWarningScreen.OKButtonInfo, new RecordItemIndex(9));
                repo.HBPopUpScreens.FromFileButtons.ReindexRelated.ReindexWarningScreen.OKButton.Click();
                Delay.Milliseconds(200);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(9)); }
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
